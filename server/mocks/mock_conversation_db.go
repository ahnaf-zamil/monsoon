// Code generated by MockGen. DO NOT EDIT.
// Source: db/app/conversation_db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	api "monsoon/api"
	db "monsoon/db"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIConversationDB is a mock of IConversationDB interface.
type MockIConversationDB struct {
	ctrl     *gomock.Controller
	recorder *MockIConversationDBMockRecorder
}

// MockIConversationDBMockRecorder is the mock recorder for MockIConversationDB.
type MockIConversationDBMockRecorder struct {
	mock *MockIConversationDB
}

// NewMockIConversationDB creates a new mock instance.
func NewMockIConversationDB(ctrl *gomock.Controller) *MockIConversationDB {
	mock := &MockIConversationDB{ctrl: ctrl}
	mock.recorder = &MockIConversationDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConversationDB) EXPECT() *MockIConversationDBMockRecorder {
	return m.recorder
}

// CreateUserDM mocks base method.
func (m *MockIConversationDB) CreateUserDM(ctx context.Context, conversationID int64, user1ID, user2ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDM", ctx, conversationID, user1ID, user2ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserDM indicates an expected call of CreateUserDM.
func (mr *MockIConversationDBMockRecorder) CreateUserDM(ctx, conversationID, user1ID, user2ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDM", reflect.TypeOf((*MockIConversationDB)(nil).CreateUserDM), ctx, conversationID, user1ID, user2ID)
}

// GetConvesationParticipantsByFields mocks base method.
func (m *MockIConversationDB) GetConvesationParticipantsByFields(ctx context.Context, fields map[db.DBColumn]any) ([]api.ConversationParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConvesationParticipantsByFields", ctx, fields)
	ret0, _ := ret[0].([]api.ConversationParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConvesationParticipantsByFields indicates an expected call of GetConvesationParticipantsByFields.
func (mr *MockIConversationDBMockRecorder) GetConvesationParticipantsByFields(ctx, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConvesationParticipantsByFields", reflect.TypeOf((*MockIConversationDB)(nil).GetConvesationParticipantsByFields), ctx, fields)
}

// GetExistingDM mocks base method.
func (m *MockIConversationDB) GetExistingDM(ctx context.Context, user1ID, user2ID string) (*api.DirectConversationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistingDM", ctx, user1ID, user2ID)
	ret0, _ := ret[0].(*api.DirectConversationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExistingDM indicates an expected call of GetExistingDM.
func (mr *MockIConversationDBMockRecorder) GetExistingDM(ctx, user1ID, user2ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistingDM", reflect.TypeOf((*MockIConversationDB)(nil).GetExistingDM), ctx, user1ID, user2ID)
}

// GetUserConversationByID mocks base method.
func (m *MockIConversationDB) GetUserConversationByID(ctx context.Context, conversationID, userID string) (*api.InboxConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConversationByID", ctx, conversationID, userID)
	ret0, _ := ret[0].(*api.InboxConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConversationByID indicates an expected call of GetUserConversationByID.
func (mr *MockIConversationDBMockRecorder) GetUserConversationByID(ctx, conversationID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConversationByID", reflect.TypeOf((*MockIConversationDB)(nil).GetUserConversationByID), ctx, conversationID, userID)
}

// GetUserInboxConversations mocks base method.
func (m *MockIConversationDB) GetUserInboxConversations(ctx context.Context, userID string) ([]api.InboxConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInboxConversations", ctx, userID)
	ret0, _ := ret[0].([]api.InboxConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInboxConversations indicates an expected call of GetUserInboxConversations.
func (mr *MockIConversationDBMockRecorder) GetUserInboxConversations(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInboxConversations", reflect.TypeOf((*MockIConversationDB)(nil).GetUserInboxConversations), ctx, userID)
}
