// Code generated by MockGen. DO NOT EDIT.
// Source: lib/password_hash.go
//
// Generated by this command:
//
//	mockgen -source=lib/password_hash.go -destination=mocks/mock_password_hash.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPasswordHasher is a mock of IPasswordHasher interface.
type MockIPasswordHasher struct {
	ctrl     *gomock.Controller
	recorder *MockIPasswordHasherMockRecorder
	isgomock struct{}
}

// MockIPasswordHasherMockRecorder is the mock recorder for MockIPasswordHasher.
type MockIPasswordHasherMockRecorder struct {
	mock *MockIPasswordHasher
}

// NewMockIPasswordHasher creates a new mock instance.
func NewMockIPasswordHasher(ctrl *gomock.Controller) *MockIPasswordHasher {
	mock := &MockIPasswordHasher{ctrl: ctrl}
	mock.recorder = &MockIPasswordHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPasswordHasher) EXPECT() *MockIPasswordHasherMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockIPasswordHasher) Hash(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockIPasswordHasherMockRecorder) Hash(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockIPasswordHasher)(nil).Hash), password)
}

// Verify mocks base method.
func (m *MockIPasswordHasher) Verify(password, hashed_password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", password, hashed_password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockIPasswordHasherMockRecorder) Verify(password, hashed_password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockIPasswordHasher)(nil).Verify), password, hashed_password)
}
