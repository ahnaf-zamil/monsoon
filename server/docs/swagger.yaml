basePath: /api
definitions:
  api.APIResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
      status:
        type: integer
    type: object
  api.MessageCreateSchema:
    properties:
      content:
        example: hunter2
        type: string
    required:
    - content
    type: object
  api.UserCreateSchema:
    properties:
      display_name:
        example: John Doe
        type: string
      email:
        example: john@doe.com
        type: string
      enc_seed:
        type: string
      nonce:
        type: string
      pub_keys:
        description: Base64 encoded X25519 and ED25519 public keys
        properties:
          enc:
            type: string
          sig:
            type: string
        required:
        - enc
        - sig
        type: object
      pw_hash:
        type: string
      salts:
        properties:
          enc_salt:
            type: string
          pw_salt:
            type: string
        required:
        - enc_salt
        - pw_salt
        type: object
      username:
        example: johndoe1
        maxLength: 15
        minLength: 3
        type: string
    required:
    - display_name
    - email
    - enc_seed
    - nonce
    - pub_keys
    - pw_hash
    - username
    type: object
  api.UserLoginSaltSchema:
    properties:
      email:
        example: john@doe.com
        type: string
    required:
    - email
    type: object
  api.UserLoginSchema:
    properties:
      email:
        example: john@doe.com
        type: string
      pw_hash:
        type: string
    required:
    - email
    - pw_hash
    type: object
info:
  contact:
    email: ahnaf@ahnafzamil.com
    name: Author
    url: https://ahnafzamil.com/contact
  description: REST API and WebSocket server for Monsoon
  license:
    name: AGPL-3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  title: Monsoon API
  version: 0.0.1
paths:
  /auth/create:
    post:
      consumes:
      - application/json
      description: User creation/registration route
      parameters:
      - description: User info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UserCreateSchema'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.APIResponse'
      summary: Create a new user
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log into user account
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UserLoginSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIResponse'
      summary: Login user
      tags:
      - auth
  /auth/salt:
    post:
      consumes:
      - application/json
      description: Get a user's salt by email
      parameters:
      - description: User email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UserLoginSaltSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIResponse'
      summary: User salt
      tags:
      - auth
  /auth/token:
    post:
      description: Retrieve authentication access token for authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIResponse'
      summary: Get Access Token
      tags:
      - auth
  /message/conversation/{conversationId}:
    get:
      consumes:
      - application/json
      description: Get messages in a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: conversationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIResponse'
      security:
      - BearerAuth: []
      summary: Get Messages
      tags:
      - messages
    post:
      consumes:
      - application/json
      description: What the title says
      parameters:
      - description: Conversation ID
        in: path
        name: conversationId
        required: true
        type: integer
      - description: Message data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.MessageCreateSchema'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIResponse'
      security:
      - BearerAuth: []
      summary: Send Message to a Conversation
      tags:
      - messages
  /message/user/{userId}:
    post:
      consumes:
      - application/json
      description: Send a direct message to a user
      parameters:
      - description: Recipient ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Message data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.MessageCreateSchema'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.APIResponse'
      security:
      - BearerAuth: []
      summary: Directly Message a User
      tags:
      - messages
  /user/me:
    post:
      description: Currently authenticated user route
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIResponse'
      security:
      - BearerAuth: []
      summary: Get Current User
      tags:
      - users
  /user/search/{username}:
    get:
      description: Search a user to create a new conversation
      parameters:
      - description: Query username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIResponse'
      security:
      - BearerAuth: []
      summary: Search User
      tags:
      - users
produces:
- application/json
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
