// Code generated by MockGen. DO NOT EDIT.
// Source: db/app/users.go
//
// Generated by this command:
//
//	mockgen -source=db/app/users.go -destination=mocks/mock_user_db.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	lib "ws_realtime_app/lib"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserDB is a mock of IUserDB interface.
type MockIUserDB struct {
	ctrl     *gomock.Controller
	recorder *MockIUserDBMockRecorder
	isgomock struct{}
}

// MockIUserDBMockRecorder is the mock recorder for MockIUserDB.
type MockIUserDBMockRecorder struct {
	mock *MockIUserDB
}

// NewMockIUserDB creates a new mock instance.
func NewMockIUserDB(ctrl *gomock.Controller) *MockIUserDB {
	mock := &MockIUserDB{ctrl: ctrl}
	mock.recorder = &MockIUserDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserDB) EXPECT() *MockIUserDBMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserDB) CreateUser(ctx context.Context, id int64, username, displayName, email string, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, id, username, displayName, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserDBMockRecorder) CreateUser(ctx, id, username, displayName, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserDB)(nil).CreateUser), ctx, id, username, displayName, email, password)
}

// GetUserByAnyField mocks base method.
func (m *MockIUserDB) GetUserByAnyField(ctx context.Context, fields map[lib.UserColumn]any) (*lib.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAnyField", ctx, fields)
	ret0, _ := ret[0].(*lib.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAnyField indicates an expected call of GetUserByAnyField.
func (mr *MockIUserDBMockRecorder) GetUserByAnyField(ctx, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAnyField", reflect.TypeOf((*MockIUserDB)(nil).GetUserByAnyField), ctx, fields)
}
